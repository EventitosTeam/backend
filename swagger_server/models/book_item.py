# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.event_item import EventItem  # noqa: F401,E501
from swagger_server import util

# from sqlalchemy import Column, String, Boolean, ForeignKey
# from sqlalchemy.orm import relationship
# from swagger_server import db
from swagger_server.database import db


class BookItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    # __tablename__ = 'book_items'
    # booking_code = db.Column('booking_code', db.String(50), primary_key=True)
    # registered = db.Column('registered', db.Boolean, nullable=False)
    # event_id = db.Column('event_id', db.String(50), db.ForeignKey('event_items.id'), nullable=False)
    # event = db.relationship("EventItem")

    # def __init__(self, event=None, booking_code=None, registered=None):
    #     self.booking_code = booking_code
    #     self.registered = registered
    #     self.event_id = event.id if event else None
    #     self.event = event
    
    def __init__(self, event: EventItem=None, booking_code: str=None, registered: bool=None):  # noqa: E501
        """BookItem - a model defined in Swagger

        :param event: The event of this BookItem.  # noqa: E501
        :type event: EventItem
        :param booking_code: The booking_code of this BookItem.  # noqa: E501
        :type booking_code: str
        :param registered: The registered of this BookItem.  # noqa: E501
        :type registered: bool
        """
        self.swagger_types = {
            'event': EventItem,
            'booking_code': str,
            'registered': bool
        }

        self.attribute_map = {
            'event': 'event',
            'booking_code': 'bookingCode',
            'registered': 'registered'
        }
        self._event = event
        self._booking_code = booking_code
        self._registered = registered

    @classmethod
    def from_dict(cls, dikt) -> 'BookItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookItem of this BookItem.  # noqa: E501
        :rtype: BookItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self) -> EventItem:
        """Gets the event of this BookItem.


        :return: The event of this BookItem.
        :rtype: EventItem
        """
        return self._event

    @event.setter
    def event(self, event: EventItem):
        """Sets the event of this BookItem.


        :param event: The event of this BookItem.
        :type event: EventItem
        """

        self._event = event

    @property
    def booking_code(self) -> str:
        """Gets the booking_code of this BookItem.

        code  # noqa: E501

        :return: The booking_code of this BookItem.
        :rtype: str
        """
        return self._booking_code

    @booking_code.setter
    def booking_code(self, booking_code: str):
        """Sets the booking_code of this BookItem.

        code  # noqa: E501

        :param booking_code: The booking_code of this BookItem.
        :type booking_code: str
        """
        if booking_code is None:
            raise ValueError("Invalid value for `booking_code`, must not be `None`")  # noqa: E501

        self._booking_code = booking_code

    @property
    def registered(self) -> bool:
        """Gets the registered of this BookItem.

        user registered on an event  # noqa: E501

        :return: The registered of this BookItem.
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered: bool):
        """Sets the registered of this BookItem.

        user registered on an event  # noqa: E501

        :param registered: The registered of this BookItem.
        :type registered: bool
        """
        if registered is None:
            raise ValueError("Invalid value for `registered`, must not be `None`")  # noqa: E501

        self._registered = registered
